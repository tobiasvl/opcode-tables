{
    "NOP": {
        "description": "No operation",
        "group": "control",
        "cycles": 4
    },
    "MOV": {
        "description": "Move value right to left",
        "cycles": 5
    },
    "MVI": {
        "description": "Load with immediate value",
        "cycles": 7
    },
    "LXI": {
        "description": "Load with immediate value",
        "cycles": 10
    },
    "LDA": {
        "description": "Load A from memory",
        "cycles": 10
    },
    "STA": {
        "description": "Store A in memory",
        "cycles": 10
    },
    "LHLD": {
        "description": "Load HL from immediate address",
        "cycles": 10
    },
    "SHLD": {
        "description": "Store HL at immediate address",
        "cycles": 10
    },
    "LDAX": {
        "description": "Load Accumulator",
        "cycles": 10
    },
    "STAX": {
        "description": "Store Accumulator",
        "cycles": 10
    },
    "XCHG": {
        "description": "Exchange DE and HL",
        "cycles": 10
    },
    "ADD": {
        "description": "Add Register or Memory to Accumulator",
        "group": "arithmetic",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "cycles": 10
    },
    "ADC": {
        "description": "Add Register or Memory to A with Carry",
        "group": "arithmetic",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "cycles": 10
    },
    "ADI": {
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "description": "Add immediate value to A",
        "group": "arithmetic",
        "cycles": 10
    },
    "ACI": {
        "description": "Add immediate value to A with Carry",
        "group": "arithmetic",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "cycles": 10
    },
    "SUB": {
        "description": "Subtract from A",
        "group": "arithmetic",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "cycles": 10
    },
    "SBB": {
        "description": "Subtract from A with Borrow",
        "group": "arithmetic",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "cycles": 10
    },
    "SUI": {
        "description": "Subtract immediate value from A",
        "group": "arithmetic",
        "cycles": 10
    },
    "SBI": {
        "description": "Subtract immediate value from A with Borrow",
        "group": "arithmetic",
        "cycles": 10
    },
    "INR": {
        "description": "Increment Register or Memory",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P"
        },
        "cycles": 10
    },
    "DCR": {
        "description": "Decrement Register or Memory",
        "flags": {
            "S": "S",
            "Z": "Z",
            "S": "S",
            "A": "A",
            "V": "V",
            "P": "P"
        },
        "cycles": 10
    },
    "INX": {
        "description": "Increment register pair",
        "flags": {
            "K": "K"
        },
        "cycles": 10
    },
    "DCX": {
        "description": "Decrement register pair",
        "flags": {
            "K": "K"
        },
        "cycles": 10
    },
    "DAD": {
        "description": "Double Add; register pair is added to HL",
        "flags": {
            "V": "V",
            "C": "C"
        },
        "cycles": 10
    },
    "DAA": {
        "description": "Decimal Adjust Accumulator",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "K": "K",
            "A": "A",
            "P": "P",
            "V": "V",
            "C": "C"
        },
        "cycles": 10
    },
    "ANA": {
        "description": "AND A with register",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "A": "A",
            "P": "P",
            "C": 0,
            "variant": {
                "Z": "Z",
                "S": "S",
                "K": "K",
                "A": "1",
                "P": "P",
                "V": 0,
                "C": 0
            }
        },
        "cycles": 10
    },
    "ORA": {
        "description": "OR A with register",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "K": "K",
            "A": "0",
            "P": "P",
            "V": 0,
            "C": 0
        },
        "cycles": 10
    },
    "XRA": {
        "description": "XOR A with register",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "K": "K",
            "A": "0",
            "P": "P",
            "C": 0
        },
        "cycles": 10
    },
    "ANI": {
        "description": "AND A with immediate value",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "A": "A",
            "P": "P",
            "C": 0,
            "variant": {
                "Z": "Z",
                "S": "S",
                "K": "K",
                "A": "1",
                "P": "P",
                "V": 0,
                "C": 0
            }
        },
        "cycles": 10
    },
    "ORI": {
        "description": "OR A with immediate value",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "K": "K",
            "A": "0",
            "P": "P",
            "V": 0,
            "C": 0
        },
        "cycles": 10
    },
    "XRI": {
        "description": "XOR A with immediate value",
        "group": "logic",
        "flags": {
            "Z": "Z",
            "S": "S",
            "K": "K",
            "A": "0",
            "P": "P",
            "C": 0
        },
        "cycles": 10
    },
    "CMP": {
        "description": "Compare A with register or memory value",
        "group": "logic",
        "cycles": 10
    },
    "CPI": {
        "description": "Compare A with immediate value",
        "group": "logic",
        "cycles": 10
    },
    "RLC": {
        "description": "Rotate A Left (Circular)",
        "flags": {
            "V": "V",
            "C": "C"
        },
        "group": "logic",
        "cycles": 10
    },
    "RRC": {
        "description": "Rotate A Right (Circular)",
        "group": "logic",
        "flags": {
            "V": "0",
            "C": "C"
        },
        "cycles": 10
    },
    "RAL": {
        "description": "Rotate A Left through carry",
        "group": "logic",
        "flags": {
            "V": "V",
            "C": "C"
        },
        "cycles": 10
    },
    "RAR": {
        "description": "Rotate A Right through carry",
        "flags": {
            "V": "0"
        },
        "group": "logic",
        "cycles": 10
    },
    "CMA": {
        "description": "Complement A",
        "group": "logic",
        "cycles": 10
    },
    "CMC": {
        "description": "Complement Carry flag",
        "group": "logic",
        "flags": {
            "C": "CÌ…"
        },
        "cycles": 10
    },
    "STC": {
        "description": "Set Carry flag",
        "group": "logic",
        "cycles": 10,
        "flags": {
            "C": "1"
        }
    },
    "JMP": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JNZ": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JZ": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JNC": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JC": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JPO": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JPE": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JP": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "JM": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "CALL": {
        "description": "Call subroutine",
        "group": "flow",
        "cycles": 10
    },
    "CNZ": {
        "description": "Call if Not Zero (Z not set)",
        "group": "flow",
        "cycles": 10
    },
    "CZ": {
        "description": "Call if Zero (Z set)",
        "group": "flow",
        "cycles": 10
    },
    "CNC": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "CC": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "CPO": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "CPE": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "CP": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "CM": {
        "description": "Load register pair with immediate value",
        "group": "flow",
        "cycles": 10
    },
    "RET": {
        "description": "Return from subroutine",
        "group": "flow",
        "cycles": 10
    },
    "RNZ": {
        "description": "Return if Not Zero (Z is not set)",
        "group": "flow",
        "cycles": 10
    },
    "RZ": {
        "description": "Return if Zero (Z is set)",
        "group": "flow",
        "cycles": 10
    },
    "RNC": {
        "description": "Return if Not Carry (C is not set)",
        "group": "flow",
        "cycles": 10
    },
    "RC": {
        "description": "Return if Carry (C is set)",
        "group": "flow",
        "cycles": 10
    },
    "RPO": {
        "description": "Return if Parity Odd (P is not set)",
        "group": "flow",
        "cycles": 10
    },
    "RPE": {
        "description": "Return if Parity Even (P is set)",
        "group": "flow",
        "cycles": 10
    },
    "RP": {
        "description": "Return if plus (S is set)",
        "group": "flow",
        "cycles": 10
    },
    "RM": {
        "description": "Return if minus (S is not set)",
        "group": "flow",
        "cycles": 10
    },
    "RST": {
        "description": "Call restart subroutine",
        "group": "flow",
        "cycles": 10
    },
    "PCHL": {
        "description": "Load program counter from HL",
        "group": "flow",
        "cycles": 10
    },
    "PUSH": {
        "description": "Push register pair to stack",
        "cycles": 10
    },
    "POP": {
        "description": "Pop from stack into register pair",
        "flags": {
            "S": "S",
            "Z": "Z",
            "K": "K",
            "A": "A",
            "V": "V",
            "P": "P",
            "C": "C"
        },
        "cycles": 10
    },
    "XTHL": {
        "description": "Exchange SP and HL",
        "cycles": 10
    },
    "SPHL": {
        "description": "Load SP from HL",
        "cycles": 10
    },
    "EI": {
        "description": "Enable Interrupts",
        "group": "control",
        "cycles": 10
    },
    "DI": {
        "description": "Disable Interrupts",
        "group": "control",
        "cycles": 10
    },
    "HLT": {
        "description": "Halt CPU",
        "group": "control",
        "cycles": 10
    },
    "IN": {
        "description": "Input port to A",
        "group": "control",
        "cycles": 10
    },
    "OUT": {
        "description": "Output A to port",
        "group": "control",
        "cycles": 10
    },
    "ARHL": {
        "description": "Arithmetic Right Shift HL",
        "flags": {
            "V": 0,
            "C": "C"
        },
        "cycles": 10
    },
    "DSUB": {
        "description": "Arithmetic Right Shift HL",
        "cycles": 10
    },
    "RDEL": {
        "description": "Shift DE Left into carry",
        "flags": {
            "V": "V",
            "C": "C"
        },
        "cycles": 10
    },
    "LDHI": {
        "description": "Load DE with HL plus immediate value",
        "cycles": 10
    },
    "LDSI": {
        "description": "Load DE with SP plus immediate value",
        "cycles": 10
    },
    "RSTV": {
        "description": "Call $0040 if overflag (V) flag is set",
        "group": "flow",
        "cycles": 10
    },
    "SHLX": {
        "description": "Store HL in memory indexed by DE",
        "cycles": 10
    },
    "JNK": {
        "description": "Jump if K flag is not set",
        "group": "flow",
        "cycles": 10
    },
    "JK": {
        "description": "Jump if K flag is set",
        "group": "flow",
        "cycles": 10
    },
    "LHLX": {
        "description": "Load HL from memory indexed by DE",
        "cycles": 10
    }
}
