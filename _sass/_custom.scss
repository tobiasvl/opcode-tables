@include media-breakpoint-down(md) {
	h1, .h1 {
		font-size: 1.4rem;
	}

	h2, .h2 {
		font-size: 1.12rem;
	}
}

kbd {
	white-space: nowrap;
}

.table-sm {
	font-size: 0.65rem;
	line-height: 1.125;
    table-layout: fixed;
}

.table-sm td {
	padding: 0; /*.2rem .5rem;*/
    height: 80px;
    min-width: 9em;
}

.table-sm td:first-child {
	padding: 0; /*.2rem .5rem;*/
    height: 80px;
    width: 2px;
}

.mnemonic, .bytes-cycles, .flags {
	display: block;
    font-weight: bold;
    font-size: 0.75rem;
	white-space: nowrap;
}

.operation {
	white-space: nowrap;
}

.mnemonic, .flags {
    font-family: $font-family-monospace;
}

.variant {
	color: blue;
}

#demo-table {
	border-collapse: collapse;

	> tbody > tr > td:nth-child(3) {
        font-weight: bold;
		white-space: nowrap;
		text-align: center;
		background-color: #fff;
		color: #000;
		border-width: 1px;
        font-family: $font-family-monospace;
	}

	// Top
	> tbody > tr:nth-child(1) > td:nth-child(3) {
        font-weight: bold;
		border-style: solid solid none solid;
		padding: .2rem .5rem 0 .5rem;
	}

	// Middle
	> tbody > tr:nth-child(2) > td:nth-child(3) {
        font-weight: bold;
		border-style: none solid none solid;
		padding: 0 .5rem;
	}
	> tbody > tr:nth-child(3) > td:nth-child(3) {
        font-weight: bold;
		border-style: none solid none solid;
		padding: 0 .5rem;
	}
	> tbody > tr:nth-child(4) > td:nth-child(3) {
        font-weight: bold;
		border-style: none solid none solid;
		padding: 0 .5rem;
	}
	> tbody > tr:nth-child(5) > td:nth-child(3) {
        font-weight: bold;
		border-style: none solid none solid;
		padding: 0 .5rem;
	}

	// Bottom
	> tbody > tr:nth-child(6) > td:nth-child(3) {
        font-weight: bold;
		border-style: none solid solid solid;
		padding: 0 .5rem .2rem .5rem;
	}
}

.legend {
	display: block;
}

.legend-color {
	display: inline-block;
	width: 30px;
	height: 1em;
	vertical-align: middle;
}

.legend-illegal { background-color: map-get($op-illegal, default); }
.legend-control { background-color: map-get($op-control, default); }
.legend-flow { background-color: map-get($op-flow, default); }
.legend-load { background-color: map-get($op-load, default); }
.legend-load16 { background-color: map-get($op-load16, default); }
.legend-arithmetic { background-color: map-get($op-arithmetic, default); }
.legend-arithmetic16 { background-color: map-get($op-arithmetic16, default); }
.legend-logic { background-color: map-get($op-logic, default); }

:target.card {
	border-left-color: #f0ad4e;
	border-left-width: 4px;
}

.theme-dark {
    .legend-illegal { background-color: map-get($op-illegal, default); }
	.legend-control { background-color: map-get($op-control, dark); }
	.legend-flow { background-color: map-get($op-flow, dark); }
	.legend-load { background-color: map-get($op-load, dark); }
	.legend-load16 { background-color: map-get($op-load16, dark); }
	.legend-arithmetic { background-color: map-get($op-arithmetic, dark); }
	.legend-arithmetic16 { background-color: map-get($op-arithmetic16, dark); }
	.legend-logic { background-color: map-get($op-logic, dark); }
}

.theme-classic {
    .legend-illegal { background-color: map-get($op-illegal, default); }
	.legend-control { background-color: map-get($op-control, classic); }
	.legend-flow { background-color: map-get($op-flow, classic); }
	.legend-load { background-color: map-get($op-load, classic); }
	.legend-load16 { background-color: map-get($op-load16, classic); }
	.legend-arithmetic { background-color: map-get($op-arithmetic, classic); }
	.legend-arithmetic16 { background-color: map-get($op-arithmetic16, classic); }
	.legend-logic { background-color: map-get($op-logic, classic); }
}

@mixin opcode($op, $variant) {
	background-color: map-get($op, $variant);

	&:target {
		background-color: if(lightness(map-get($op, $variant)) >= 50%, darken(map-get($op, $variant), 20%), lighten(map-get($op, $variant), 20%));
	}
}

@mixin opcode-table($variant:default) {
	> thead > tr > th,
	> tbody > tr > td {
		// min-width: 4rem;

		&:first-child {
			vertical-align: middle;
            width: 1.5em;
			// min-width: 2rem;
		}
	}

	> thead > tr > th,
	> tbody > tr > td {
		text-align: center;
        vertical-align: middle;
	}

	> tbody > tr > td:first-child {
		font-weight: bold;
        width: 1.5em;
	}

	.op-illegal {
		@include opcode($op-illegal, $variant);
	}

    .operation {
        padding: .2rem .5rem;
    }

    .illegal {
        background: repeating-linear-gradient(
            45deg,
            transparent,
            transparent 10px,
            map-get($op-illegal, $variant) 10px,
            map-get($op-illegal, $variant) 20px
        );
    }

	/* Control / misc */
	.op-group-control,
	.op-prefix {
		@include opcode($op-control, $variant);
	}

	/* Jumps / calls */
	.op-group-flow {
		@include opcode($op-flow, $variant);
	}

	/* 8bit ops */
	.op-group-transfer {
		@include opcode($op-load, $variant);
	}

	.op-group-arithmetic {
		@include opcode($op-arithmetic, $variant);
	}

	.op-group-logic {
		@include opcode($op-logic, $variant);
	}

    /* There has to be a better way than to do this
       for each combo: */
    td.op-group-control.op-group-transfer {
        background: repeating-linear-gradient(
            45deg,
            map-get($op-control, $variant),
            map-get($op-control, $variant) 10px,
            map-get($op-load, $variant) 10px,
            map-get($op-load, $variant) 20px
        );
    }
    div.op-group-control.op-group-transfer {
        background: none;
    }

	/* 16bit ops */
/*
	.op-ld.is16bit,
	.op-push,
	.op-pop {
		@include opcode($op-load16, $variant);
	}

	.op-add.is16bit,
	.op-inc.is16bit,
	.op-dec.is16bit {
		@include opcode($op-arithmetic16, $variant);
	}
*/
}

.opcode-table {
	@include opcode-table();

	&.table-dark {
		@include opcode-table(dark);
	}
}

.theme-classic {
	background-color: #dfdfdf;

	.opcode-table {
		&, thead, tbody, tr, th, td {
			border-color: #000;
		}

		th,
		tr > td:first-child {
			background-color: #9f9f9f;
		}

		@include opcode-table(classic);
	}
}

/* Tooltip container */

.tool {
  position: relative;
  display: inline-block;
  border-bottom: 1px dotted black;
}

/* Tooltip text */
.tool .tooltiptext {
  white-space: normal;
  visibility: hidden;
  /*width: 120px;*/
  background-color: black;
  color: #fff;
  text-align: center;
  padding: 5px;
  border-radius: 6px;
 
  /* Position the tooltip text - see examples below! */
  position: absolute;
  z-index: 1;
}

.tooltiptext.left {
  top: -5px;
  right: 105%;
}
.tooltiptext.right {
  top: -5px;
  left: 105%;
}
.tooltiptext.top {
  width: 120px;
  bottom: 100%;
  left: 50%;
  margin-left: -60px; /* use half of the width (120/2 = 60), to center the tooltip */
}
.tooltiptext.bottom {
  width: 120px;
  top: 100%;
  left: 50%;
  margin-left: -60px; /* use half of the width (120/2 = 60), to center the tooltip */
}


/* Show the tooltip text when you mouse over the tooltip container */
.tool:hover .tooltiptext {
  visibility: visible;
}

.variant.operation {
    border-top: 1px solid #dee2e6;
}
